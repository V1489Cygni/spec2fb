REQ := TRUE;

init(st1) := s1;
next(st1) := case
    next(CNF & c1Extend) & st1 = s1 : s2;
    next(c1Extend) & st1 = s2 : s4;
    next(c1Extend) & st1 = s3 : s4;
    next(c1Retract) & st1 = s2 : s1;
    next(c1Retract) & st1 = s3 : s1;
    next(CNF & c1Retract) & st1 = s4 : s3;
    TRUE : st1;
esac;

c1Home := st1 = s1 | st1 = s2;

c1End := st1 = s3 | st1 = s4;

init(c2Home) := TRUE;
next(c2Home) := case
	next(CNF) & next(c2Extend) : FALSE;
	next(CNF) & next(c2Retract) : TRUE;
	TRUE : c2Home;
esac;

init(c2End) := FALSE;
next(c2End) := case
	next(CNF) & next(c2Extend) : TRUE;
	next(CNF) & next(c2Retract) : FALSE;
	TRUE : c2End;
esac;

init(vcHome) := TRUE;
next(vcHome) := case
	next(CNF) & next(vcExtend) : FALSE;
	next(CNF) & !next(vcExtend) : TRUE;
	TRUE : vcHome;
esac;

init(vcEnd) := FALSE;
next(vcEnd) := case
	next(CNF) & next(vcExtend) : TRUE;
	next(CNF) & !next(vcExtend) : FALSE;
	TRUE : vcEnd;
esac;

init(vs) := FALSE;
next(vs) := case
	next(CNF) & next(vacuum_on) : TRUE;
	next(CNF) & next(vacuum_off) : FALSE;
	TRUE : vs;
esac;

init(vac) := FALSE;
next(vac) := case
	next(vp1) | next(vp2) | next(vp3) : TRUE;
	!next(vs) : FALSE;
	TRUE : vac;
esac;

next(pp1) := case
	vp1 : p1;
	pp1 : TRUE;
	TRUE : p1;
esac;

next(pp2) := case
	vp2 : p2;
	pp2 : TRUE;
	TRUE : p2;
esac;

next(pp3) := case
	vp3 : p3;
	pp3 : TRUE;
	TRUE : p3;
esac;
